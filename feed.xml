<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://stanmart.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://stanmart.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-28T20:29:07+00:00</updated><id>https://stanmart.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">A snapshot of economics, part 2 - visualizing the network</title><link href="https://stanmart.github.io/blog/2018/econ_network_2/" rel="alternate" type="text/html" title="A snapshot of economics, part 2 - visualizing the network"/><published>2018-10-27T00:00:00+00:00</published><updated>2018-10-27T00:00:00+00:00</updated><id>https://stanmart.github.io/blog/2018/econ_network_2</id><content type="html" xml:base="https://stanmart.github.io/blog/2018/econ_network_2/"><![CDATA[<p>The <a href="http://stanmart.github.io/network/web/scraping/python/econlit/ebscohost/2018/10/25/econ-network-1/">last article</a> focused on collecting data on the economics literature (from a legal and a technical standpoint). Here is a short primer if you have not read it.</p> <p>Every article published in the field of economics is assigned a few (usually 2-5) JEL (Journal of Economic Literature) codes by the authors which define the subfields it belongs to. This system of classification is hierarchical: the codes consist of a letter (main category) followed by two numbers. You can find the list <a href="https://www.aeaweb.org/econlit/jelCodes.php?view=jel">here</a>.</p> <p>As a project for a network science cource, Olena Chystiakova and I attempted to analyze, visualize and model the network of these classifications. We use the number of articles containing a pair of JEL codes as the measure of the strength of association between the two subfields. In order to do this, we have downloaded the JEL codes (and some other metadata) of every article published in the field of economics in 2014 that could be found in the Econlit database. This article will deal with the transformation and the visualization of this data.</p> <h2 id="projection-to-jel-codes">Projection to JEL codes</h2> <p>We will start by processing a data into network format. Let us import it into a <code class="language-plaintext highlighter-rouge">pandas.DataFrame</code> and see how the downloaded database looks!</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sqlite3</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="sh">"</span><span class="s">data/full_database.db</span><span class="sh">"</span><span class="p">)</span>
<span class="n">articles_wide</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_sql</span><span class="p">(</span><span class="sh">"</span><span class="s">SELECT an, jel FROM articles</span><span class="sh">"</span><span class="p">,</span> <span class="n">conn</span><span class="p">)</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
<span class="n">articles_wide</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <table> <thead> <tr> <th>an</th> <th>jel</th> </tr> </thead> <tbody> <tr> <td>1419951</td> <td>B31; G30; M40</td> </tr> <tr> <td>1419952</td> <td>G34; L25; M12; M52</td> </tr> <tr> <td>1419953</td> <td>D24; G31; L14; L23; L24; L25; M41</td> </tr> <tr> <td>1419954</td> <td>D82; G12; G32; L25; M41</td> </tr> <tr> <td>1419955</td> <td>G32; G34; G38; L25; M42; M48</td> </tr> </tbody> </table> <p>For every article (identified by an article number, <code class="language-plaintext highlighter-rouge">an</code>) we have all of the JEL codes it is associated with. Unfortunately, the JEL codes are stored as a string delimited by semicolons. In order to turn it into a proper edgelist between article and JEL code nodes, it has to be transformed it so that each row of the <code class="language-plaintext highlighter-rouge">jel</code> column contains exactly one JEL code.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">articles_series</span> <span class="o">=</span> <span class="p">(</span><span class="n">articles_wide</span><span class="p">[</span><span class="n">articles_wide</span><span class="p">[</span><span class="sh">"</span><span class="s">jel</span><span class="sh">"</span><span class="p">]</span> <span class="o">!=</span> <span class="sh">""</span><span class="p">]</span>
                   <span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="p">[(</span><span class="n">row</span><span class="p">.</span><span class="n">an</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">row</span><span class="p">.</span><span class="n">jel</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">; </span><span class="sh">"</span><span class="p">)],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="n">articles_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">articles_series</span><span class="p">:</span>
    <span class="n">articles_list</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span>
    
<span class="n">articles_long</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">articles_list</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">an</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">jel</span><span class="sh">"</span><span class="p">])</span>
<span class="n">articles_long</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <table> <thead> <tr> <th>an</th> <th>jel</th> </tr> </thead> <tbody> <tr> <td>1419951</td> <td>B31</td> </tr> <tr> <td>1419951</td> <td>G30</td> </tr> <tr> <td>1419951</td> <td>M40</td> </tr> <tr> <td>1419952</td> <td>G34</td> </tr> <tr> <td>1419952</td> <td>L25</td> </tr> </tbody> </table> <p>Now we that we have the <em>bipartite graph</em> (i.e. a graph whose nodes areseparable into two groups, with edges only connecting nodes from different groups), we can use NetworkX to project it to the nodes representing JEL codes, thereby producing an undirected weighed graph where the nodes are the JEL codes.</p> <p>First we create the bipartite graph by creating an empty node, adding the article nodes, adding the JEL nodes, and finally adding the edges.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">networkx</span> <span class="k">as</span> <span class="n">nx</span>

<span class="n">bipart_graph</span> <span class="o">=</span> <span class="n">nx</span><span class="p">.</span><span class="nc">Graph</span><span class="p">()</span>
<span class="n">bipart_graph</span><span class="p">.</span><span class="nf">add_nodes_from</span><span class="p">(</span><span class="n">articles_long</span><span class="p">.</span><span class="n">an</span><span class="p">.</span><span class="nf">unique</span><span class="p">(),</span> <span class="n">bipart</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">bipart_graph</span><span class="p">.</span><span class="nf">add_nodes_from</span><span class="p">(</span><span class="n">articles_long</span><span class="p">.</span><span class="n">jel</span><span class="p">.</span><span class="nf">unique</span><span class="p">(),</span> <span class="n">bipart</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">bipart_graph</span><span class="p">.</span><span class="nf">add_edges_from</span><span class="p">(</span><span class="n">articles_long</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">an</span><span class="p">,</span> <span class="n">row</span><span class="p">.</span><span class="n">jel</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</code></pre></div></div> <p>Then we can use the <code class="language-plaintext highlighter-rouge">weighted_projected_graph</code> function from the <code class="language-plaintext highlighter-rouge">networkx.projection</code> module to project the bipartite graph to one set of nodes, with the weight of nodes representing the number of articles through which two JEL codes are connected. Then, as we are not interested in disconnected nodes, we select the giant component of the projection.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jel_graph</span> <span class="o">=</span> <span class="n">nx</span><span class="p">.</span><span class="n">bipartite</span><span class="p">.</span><span class="n">projection</span><span class="p">.</span><span class="nf">weighted_projected_graph</span><span class="p">(</span><span class="n">bipart_graph</span><span class="p">,</span>
                                                             <span class="n">articles_long</span><span class="p">.</span><span class="n">jel</span><span class="p">.</span><span class="nf">unique</span><span class="p">())</span>
<span class="n">jel_graph_giant</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">nx</span><span class="p">.</span><span class="nf">connected_component_subgraphs</span><span class="p">(</span><span class="n">jel_graph</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</code></pre></div></div> <h2 id="visualization-preliminaries">Visualization preliminaries</h2> <p>This far the graph is just a set of nodes and a set of edges connecting them. In order to plot it, we need to assign (x, y) coordinates to each node. This can be done by using functions from the <code class="language-plaintext highlighter-rouge">networkx.drawing</code> module. In this example, a force-directed algorithm is used, which places strongly connected nodes (measured by the edge weight) closer to each other.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fr_layout</span> <span class="o">=</span> <span class="n">nx</span><span class="p">.</span><span class="n">drawing</span><span class="p">.</span><span class="nf">fruchterman_reingold_layout</span><span class="p">(</span><span class="n">jel_graph_giant</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="sh">"</span><span class="s">weight</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Now we need to convert the <code class="language-plaintext highlighter-rouge">networkx</code> graph to a format that can be handled by <code class="language-plaintext highlighter-rouge">holoviews</code> and <code class="language-plaintext highlighter-rouge">datashader</code>: a <code class="language-plaintext highlighter-rouge">pandas.DataFrame</code>with the columns containing the various attributes of the nodes [name, x-coordinate, y-coordinate, JEL category, and weighed degree (the number of edges connected to a node, or in the weighed case, the sum of their weights)].</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">node_df</span> <span class="o">=</span> <span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="nf">from_dict</span><span class="p">(</span><span class="n">fr_layout</span><span class="p">,</span> <span class="n">orient</span><span class="o">=</span><span class="sh">'</span><span class="s">index</span><span class="sh">'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">x</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">])</span>
           <span class="p">.</span><span class="nf">reset_index</span><span class="p">()</span>
           <span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">index</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">}))</span>
<span class="n">node_df</span><span class="p">[</span><span class="sh">"</span><span class="s">category</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">node_df</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="sh">"</span><span class="s">category</span><span class="sh">"</span><span class="p">)</span>
<span class="n">degree_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">jel_graph_giant</span><span class="p">.</span><span class="nf">degree</span><span class="p">(</span><span class="n">weight</span><span class="o">=</span><span class="sh">"</span><span class="s">weight</span><span class="sh">"</span><span class="p">)),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">degree</span><span class="sh">"</span><span class="p">]).</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">)</span>
<span class="n">node_df</span> <span class="o">=</span> <span class="n">node_df</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">degree_df</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">node_df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <table> <thead> <tr> <th>name</th> <th>x</th> <th>y</th> <th>category</th> <th>degree</th> </tr> </thead> <tbody> <tr> <td>K33</td> <td>-0.335445</td> <td>0.084594</td> <td>K</td> <td>589</td> </tr> <tr> <td>C81</td> <td>-0.606666</td> <td>0.115445</td> <td>C</td> <td>272</td> </tr> <tr> <td>D45</td> <td>0.664908</td> <td>0.800432</td> <td>D</td> <td>152</td> </tr> <tr> <td>I18</td> <td>0.158935</td> <td>-0.143668</td> <td>I</td> <td>2931</td> </tr> <tr> <td>O55</td> <td>-0.951587</td> <td>-0.080761</td> <td>O</td> <td>6</td> </tr> </tbody> </table> <p>Now we need to do the same with edges. As we will use functions from the <code class="language-plaintext highlighter-rouge">datashader.bundling</code> module later on, we need a very specific format (<code class="language-plaintext highlighter-rouge">holoviews</code> would be more flexible): a <code class="language-plaintext highlighter-rouge">pandas.DataFrame</code> having the columns <code class="language-plaintext highlighter-rouge">source</code> and <code class="language-plaintext highlighter-rouge">target</code>, indicating the <em>index</em> of the nodes that the edge connects, and optionally a column of weights. It may have more columns, but it needs to have <code class="language-plaintext highlighter-rouge">source</code> and <code class="language-plaintext highlighter-rouge">target</code> at a minimum.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">edge_df_names</span> <span class="o">=</span> <span class="n">nx</span><span class="p">.</span><span class="nf">to_pandas_edgelist</span><span class="p">(</span><span class="n">jel_graph_giant</span><span class="p">).</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">source</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">source_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">target</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">target_name</span><span class="sh">"</span><span class="p">})</span>
<span class="n">name_index_key</span> <span class="o">=</span> <span class="n">node_df</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">].</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">)</span>
<span class="n">edge_df</span> <span class="o">=</span> <span class="p">(</span><span class="n">edge_df_names</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">name_index_key</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">index</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">source</span><span class="sh">"</span><span class="p">}),</span> <span class="n">left_on</span><span class="o">=</span><span class="sh">'</span><span class="s">source_name</span><span class="sh">'</span><span class="p">,</span> <span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
                        <span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">name_index_key</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">index</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">target</span><span class="sh">"</span><span class="p">}),</span> <span class="n">left_on</span><span class="o">=</span><span class="sh">'</span><span class="s">target_name</span><span class="sh">'</span><span class="p">,</span> <span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
<span class="n">edge_df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <table> <thead> <tr> <th>source_name</th> <th>target_name</th> <th>weight</th> <th>source</th> <th>target</th> </tr> </thead> <tbody> <tr> <td>K33</td> <td>G34</td> <td>3</td> <td>0</td> <td>305</td> </tr> <tr> <td>D45</td> <td>G34</td> <td>1</td> <td>2</td> <td>305</td> </tr> <tr> <td>I18</td> <td>G34</td> <td>4</td> <td>3</td> <td>305</td> </tr> <tr> <td>O34</td> <td>G34</td> <td>5</td> <td>6</td> <td>305</td> </tr> <tr> <td>I25</td> <td>G34</td> <td>1</td> <td>7</td> <td>305</td> </tr> </tbody> </table> <h2 id="visualizing-the-network">Visualizing the network</h2> <p>We will use <code class="language-plaintext highlighter-rouge">holoviews</code> to annotate our data, complemented by <code class="language-plaintext highlighter-rouge">datashader</code> to properly visualize the many overlapping edges. We also utilize the <code class="language-plaintext highlighter-rouge">bokeh</code> extension of <code class="language-plaintext highlighter-rouge">holoviews</code> so that the resulting graphs will be interactive (supporting panning, zooming and tooltips). That said, they will be fully interactive if a python kernel is running (in this case <code class="language-plaintext highlighter-rouge">datashader</code> recomputes the shading with each change of view) and somewhat interactive if they are exported as Javascript (the edges will be a fixed image, so no rerendering on zooming, but tooltips and panning would work properly). On this blog however, the plots will be static images.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">holoviews</span> <span class="k">as</span> <span class="n">hv</span>
<span class="kn">from</span> <span class="n">holoviews.operation.datashader</span> <span class="kn">import</span> <span class="n">datashade</span><span class="p">,</span> <span class="n">bundle_graph</span>
<span class="n">hv</span><span class="p">.</span><span class="nf">extension</span><span class="p">(</span><span class="sh">"</span><span class="s">bokeh</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>We start by creating a <code class="language-plaintext highlighter-rouge">Nodes</code> object, which is a representation of the graph’s nodes. The key dimensions will be the coordinates and the indices, and we also add the JEL category and the log-degree of the node as value dimensions. Then, we create a <code class="language-plaintext highlighter-rouge">Graph</code> object by using the previously created <code class="language-plaintext highlighter-rouge">nodes</code> and adding two additional key dimensions: the source and target node of each edge. We will also use the edge weight as a value dimension.</p> <p>There will be two versions of the graph:</p> <ul> <li><code class="language-plaintext highlighter-rouge">graph</code>, where each edge is drawn straight from source to target, and</li> <li><code class="language-plaintext highlighter-rouge">bundled_graph</code>, where edges closed to each other are bundled together.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colors</span> <span class="o">=</span> <span class="n">hv</span><span class="p">.</span><span class="nc">Cycle</span><span class="p">(</span><span class="sh">'</span><span class="s">Category20</span><span class="sh">'</span><span class="p">).</span><span class="n">values</span>

<span class="n">nodes</span> <span class="o">=</span> <span class="n">hv</span><span class="p">.</span><span class="nc">Nodes</span><span class="p">((</span><span class="n">node_df</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">node_df</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">node_df</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">node_df</span><span class="p">.</span><span class="n">category</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="n">node_df</span><span class="p">.</span><span class="n">degree</span><span class="p">)</span> <span class="o">/</span> <span class="mi">15</span><span class="p">),</span>
                 <span class="n">vdims</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">Category</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">log_degree</span><span class="sh">"</span><span class="p">])</span>

<span class="n">graph</span> <span class="o">=</span> <span class="n">hv</span><span class="p">.</span><span class="nc">Graph</span><span class="p">(((</span><span class="n">edge_df</span><span class="p">.</span><span class="n">source</span><span class="p">,</span> <span class="n">edge_df</span><span class="p">.</span><span class="n">target</span><span class="p">,</span> <span class="n">edge_df</span><span class="p">.</span><span class="n">weight</span><span class="p">),</span> <span class="n">nodes</span><span class="p">),</span>
                 <span class="n">vdims</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">Weight</span><span class="sh">"</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">A snapshot of economics</span><span class="sh">'</span><span class="p">)</span>
<span class="n">graph</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">redim</span><span class="p">.</span><span class="nf">range</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mf">1.05</span><span class="p">,</span> <span class="mf">1.4</span><span class="p">),</span> <span class="n">y</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">)).</span><span class="nf">options</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">colors</span><span class="p">)</span>

<span class="n">bundled_graph</span> <span class="o">=</span> <span class="nf">bundle_graph</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="sh">"</span><span class="s">Weight</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Everything is set: our data is annotated, so we just need to print it to plot it. A slight twist is that we plot the nodes and the edges separately, as we do not want to datashade the former.</p> <p>We can use the <code class="language-plaintext highlighter-rouge">%%opts</code> ipython magic to set some display properties, and also to map the categories to node colors and log-degrees to node sizes. Then we utilize the <code class="language-plaintext highlighter-rouge">datashade</code> function from the <code class="language-plaintext highlighter-rouge">holoviews.operation.datashader</code> module to map the edges to pixels according to density, and use the <code class="language-plaintext highlighter-rouge">*</code> operator to place the two plots on top of each other.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">opts</span> <span class="n">Nodes</span> <span class="p">[</span><span class="n">color_index</span><span class="o">=</span><span class="sh">'</span><span class="s">Category</span><span class="sh">'</span> <span class="n">size_index</span><span class="o">=</span><span class="sh">'</span><span class="s">log_degree</span><span class="sh">'</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span> <span class="n">xaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">yaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">bgcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span> <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">hover</span><span class="sh">"</span><span class="p">]]</span> <span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">colors</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.85</span><span class="p">)</span>
<span class="o">%%</span><span class="n">opts</span> <span class="n">Graph</span> <span class="p">[</span><span class="n">width</span><span class="o">=</span><span class="mi">600</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span> <span class="n">xaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">yaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">bgcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span> <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">hover</span><span class="sh">"</span><span class="p">]]</span>
<span class="nf">datashade</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">normalization</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">cyan</span><span class="sh">'</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span> <span class="o">*</span> <span class="n">graph</span><span class="p">.</span><span class="n">nodes</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/econ_network/count_edges-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/econ_network/count_edges-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/econ_network/count_edges-1400.webp"/> <img src="/assets/img/econ_network/count_edges.png" width="600" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">opts</span> <span class="n">Nodes</span> <span class="p">[</span><span class="n">color_index</span><span class="o">=</span><span class="sh">'</span><span class="s">Category</span><span class="sh">'</span> <span class="n">size_index</span><span class="o">=</span><span class="sh">'</span><span class="s">log_degree</span><span class="sh">'</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span> <span class="n">xaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">yaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">bgcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span> <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">hover</span><span class="sh">"</span><span class="p">]]</span> <span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">colors</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.85</span><span class="p">)</span>
<span class="o">%%</span><span class="n">opts</span> <span class="n">Graph</span> <span class="p">[</span><span class="n">width</span><span class="o">=</span><span class="mi">600</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span> <span class="n">xaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">yaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">bgcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span> <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">hover</span><span class="sh">"</span><span class="p">]]</span>
<span class="nf">datashade</span><span class="p">(</span><span class="n">bundled_graph</span><span class="p">,</span> <span class="n">normalization</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">cyan</span><span class="sh">'</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">)</span> <span class="o">*</span> <span class="n">bundled_graph</span><span class="p">.</span><span class="n">nodes</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/econ_network/count_bundled-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/econ_network/count_bundled-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/econ_network/count_bundled-1400.webp"/> <img src="/assets/img/econ_network/count_bundled.png" width="600" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Not a bad start, but not perfect either. You might have noticed, that we did not use the edge weights, therefore the edge shades represent the number of edges, not the sum of their weights. Unfortunately, shading based on the sum of weights is not as easy as I would like it to be. The problem is that the <code class="language-plaintext highlighter-rouge">edgepaths</code>attribute of a <code class="language-plaintext highlighter-rouge">Graph</code> object (which is an <code class="language-plaintext highlighter-rouge">EdgePath</code> object itself) does not contain the weight. As the <code class="language-plaintext highlighter-rouge">datashade</code> function gets this object for shading the nodes, it cannot see the weights, and as a result, supplying <code class="language-plaintext highlighter-rouge">datashader.sum(Weight)</code> as an aggregation function will not work.</p> <p>We can solve this by creating an <code class="language-plaintext highlighter-rouge">EdgePath</code>-like object ourselves, which will nevertheless have a <code class="language-plaintext highlighter-rouge">Weight</code> value dimension, and supplying that to <code class="language-plaintext highlighter-rouge">datashade</code>. We can use the <code class="language-plaintext highlighter-rouge">connect_edges</code> and <code class="language-plaintext highlighter-rouge">hammer_bundle</code> functions from the <code class="language-plaintext highlighter-rouge">datashader.bundling</code> module to create the dataframes containing the edge path, separated by <code class="language-plaintext highlighter-rouge">NaN</code> rows so that different edges will not be connected. If they are given a <code class="language-plaintext highlighter-rouge">weight</code> attribute, the resulting <code class="language-plaintext highlighter-rouge">pandas.DataFrame</code> will also contain a <code class="language-plaintext highlighter-rouge">weight</code> column. Then a <code class="language-plaintext highlighter-rouge">Path</code> object can be created having the coordinates of the paths as key dimensions and the weights as a value dimension. Finally, this <code class="language-plaintext highlighter-rouge">Path</code> object can be datashaded, and the sum of weights can be used as an aggregator function. The nodes are then added to the plot just like before.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">datashader</span> <span class="k">as</span> <span class="n">ds</span>
<span class="kn">from</span> <span class="n">datashader.bundling</span> <span class="kn">import</span> <span class="n">hammer_bundle</span><span class="p">,</span> <span class="n">connect_edges</span>

<span class="n">conn_edge_df</span> <span class="o">=</span> <span class="nf">connect_edges</span><span class="p">(</span><span class="n">node_df</span><span class="p">,</span> <span class="n">edge_df</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="sh">"</span><span class="s">weight</span><span class="sh">"</span><span class="p">)</span>
<span class="n">edge_paths</span> <span class="o">=</span> <span class="n">hv</span><span class="p">.</span><span class="nc">Path</span><span class="p">([</span><span class="n">conn_edge_df</span><span class="p">.</span><span class="n">values</span><span class="p">],</span> <span class="n">vdims</span><span class="o">=</span><span class="sh">"</span><span class="s">Weight</span><span class="sh">"</span><span class="p">)</span>

<span class="n">bundled_edge_df</span> <span class="o">=</span> <span class="nf">hammer_bundle</span><span class="p">(</span><span class="n">node_df</span><span class="p">,</span> <span class="n">edge_df</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="sh">"</span><span class="s">weight</span><span class="sh">"</span><span class="p">)</span>
<span class="n">bundled_paths</span> <span class="o">=</span> <span class="n">hv</span><span class="p">.</span><span class="nc">Path</span><span class="p">([</span><span class="n">bundled_edge_df</span><span class="p">.</span><span class="n">values</span><span class="p">],</span> <span class="n">vdims</span><span class="o">=</span><span class="sh">"</span><span class="s">Weight</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">opts</span> <span class="n">Nodes</span> <span class="p">[</span><span class="n">color_index</span><span class="o">=</span><span class="sh">'</span><span class="s">Category</span><span class="sh">'</span> <span class="n">size_index</span><span class="o">=</span><span class="sh">'</span><span class="s">log_degree</span><span class="sh">'</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span> <span class="n">xaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">yaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">bgcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span> <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">hover</span><span class="sh">"</span><span class="p">]]</span> <span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">colors</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.85</span><span class="p">)</span>
<span class="o">%%</span><span class="n">opts</span> <span class="n">Graph</span> <span class="p">[</span><span class="n">width</span><span class="o">=</span><span class="mi">600</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span> <span class="n">xaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">yaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">bgcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span> <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">hover</span><span class="sh">"</span><span class="p">]]</span>
<span class="nf">datashade</span><span class="p">(</span><span class="n">edge_paths</span><span class="p">,</span> <span class="n">normalization</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">cyan</span><span class="sh">'</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> <span class="n">aggregator</span><span class="o">=</span><span class="n">ds</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="sh">'</span><span class="s">Weight</span><span class="sh">'</span><span class="p">))</span> <span class="o">*</span>\
    <span class="n">bundled_graph</span><span class="p">.</span><span class="n">nodes</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/econ_network/sum_edges-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/econ_network/sum_edges-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/econ_network/sum_edges-1400.webp"/> <img src="/assets/img/econ_network/sum_edges.png" width="600" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%%</span><span class="n">opts</span> <span class="n">Nodes</span> <span class="p">[</span><span class="n">color_index</span><span class="o">=</span><span class="sh">'</span><span class="s">Category</span><span class="sh">'</span> <span class="n">size_index</span><span class="o">=</span><span class="sh">'</span><span class="s">log_degree</span><span class="sh">'</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span> <span class="n">xaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">yaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">bgcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span> <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">hover</span><span class="sh">"</span><span class="p">]]</span> <span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="n">colors</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.85</span><span class="p">)</span>
<span class="o">%%</span><span class="n">opts</span> <span class="n">Graph</span> <span class="p">[</span><span class="n">width</span><span class="o">=</span><span class="mi">600</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span> <span class="n">xaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">yaxis</span><span class="o">=</span><span class="bp">None</span> <span class="n">bgcolor</span><span class="o">=</span><span class="sh">"</span><span class="s">black</span><span class="sh">"</span> <span class="n">tools</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">hover</span><span class="sh">"</span><span class="p">]]</span>
<span class="nf">datashade</span><span class="p">(</span><span class="n">bundled_paths</span><span class="p">,</span> <span class="n">normalization</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">cyan</span><span class="sh">'</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">600</span><span class="p">,</span> <span class="n">aggregator</span><span class="o">=</span><span class="n">ds</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="sh">'</span><span class="s">Weight</span><span class="sh">'</span><span class="p">))</span> <span class="o">*</span>\
    <span class="n">bundled_graph</span><span class="p">.</span><span class="n">nodes</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/econ_network/sum_bundled-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/econ_network/sum_bundled-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/econ_network/sum_bundled-1400.webp"/> <img src="/assets/img/econ_network/sum_bundled.png" width="600" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="further-refinements">Further refinements</h2> <p>Almost there. The last detail would be to color the edges using the colors of the nodes they connect (ideally, the edge colors would be gradients between the source and target node colors). Unfortunately, there are multiple issues with this.</p> <p>First, the dataframes resulting from the <code class="language-plaintext highlighter-rouge">connect_edges</code> and <code class="language-plaintext highlighter-rouge">hammer_bundle</code> functions do not have an id by default, so joining them to node or edge attributes is not straightforward. The two functions have an <code class="language-plaintext highlighter-rouge">include_edge_id</code> argument, which sounds like it should solve this, but setting it to either <code class="language-plaintext highlighter-rouge">True</code> or the name of a column crashes the interpreter (at least in this example). Might be a bug. Nevertheless, one could certainly write a custom <code class="language-plaintext highlighter-rouge">connect_edges</code> function, and probably joining edge attributes to the result of <code class="language-plaintext highlighter-rouge">hammer_bundle</code> is also feasible, but it would be an awful lot of bother.</p> <p>Another problem is that there is no <code class="language-plaintext highlighter-rouge">sum_cat</code> aggregation function in datashader. There is <code class="language-plaintext highlighter-rouge">count_cat</code>, but then we lose the weight information. We could also shade the categories separately and <code class="language-plaintext highlighter-rouge">stack</code> them on top of each other, but <del>then the stacking order would matter a lot</del> (correction: by using the <code class="language-plaintext highlighter-rouge">how='add'</code> argument it would not). Neither of these options is optimal.</p> <p>What we did back then was exporting the network to a <code class="language-plaintext highlighter-rouge">graphml</code> file, and loading it into <a href="https://gephi.org/">Gephi</a> (a graph visualization tool) to make the visualization. It is a WYSIWYG-type program, so we could easily fiddle around with various parameters until we got the desired result. I think the final product is pretty good. You can find an <code class="language-plaintext highlighter-rouge">svg</code> version <a href="https://stanmart.github.io/assets/img/econ_network/full_graph.svg">here</a>.</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/econ_network/full_graph-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/econ_network/full_graph-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/econ_network/full_graph-1400.webp"/> <img src="/assets/img/econ_network/full_graph.png" class="img-fluid rounded z-depth-1" width="600" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>While the fact that the final chapter in a Python dataviz article is to use another software for better results might seem a litle dispiriting at first, i think the main takaway is this: <em>use the right tool for the job</em>. For visualizing this moderate-sized network, the right tool seems to be a dedicated graph visualization software.</p> <p>We managed to create pretty good graphs using <code class="language-plaintext highlighter-rouge">holoviews</code> and <code class="language-plaintext highlighter-rouge">datashader</code>, but for the reasons listed above, these packages are not on par with Gephi yet, as far as graph visualization goes. But it is not neccesssarily a bad thing. For one, the former libraries have a much broader scope than just graphs and networks, so it is not surprising that they cannot compete with a specialist. Also, they may improve a lot in the future, as they are both relatively new. And you have to remember that it was a moderate-sized graph. For one with hundreds of thousands of nodes and millions of nodes, datashading might be the only reasonable option, and may come up on top even with its current limitations.</p> <p>Hope you enjoyed this write-up. The concluding part of this series will deal with modelling this network.</p>]]></content><author><name></name></author><category term="network"/><category term="economics"/><category term="visualization"/><category term="holoviews"/><category term="datashader"/><category term="gephi"/><summary type="html"><![CDATA[The last article focused on collecting data on the economics literature (from a legal and a technical standpoint). Here is a short primer if you have not read it.]]></summary></entry><entry><title type="html">A snapshot of economics, part 1 - getting the data</title><link href="https://stanmart.github.io/blog/2018/econ-network-1/" rel="alternate" type="text/html" title="A snapshot of economics, part 1 - getting the data"/><published>2018-10-25T00:00:00+00:00</published><updated>2018-10-25T00:00:00+00:00</updated><id>https://stanmart.github.io/blog/2018/econ-network-1</id><content type="html" xml:base="https://stanmart.github.io/blog/2018/econ-network-1/"><![CDATA[<p>Back in 2015 Olena Chystiakova and I did a project for a Network Science course that might be interesting from a web scraping or data visualization perspective. I am going to present this project in a series of three short articles: I will start with getting the data (web scraping), continue with the visualization of the network, and conclude with modelling the network (the actual network science stuff). This is the first part of the series.</p> <h2 id="the-task">The task</h2> <p>The project we had to do had quite loose requirements: we had to obtain a real-life network and then analyze it. As is often the case when getting such tasks, the most difficult part was deciding what exactly to analyze. In the end, we settled on a network representing economics: the subfields of economics, connected by articles that belong to multiple subfields.</p> <p>Fortunately, the American Economic Association has a system for classifying academic content in Economics: the system of <a href="https://www.aeaweb.org/econlit/jelCodes.php?view=jel">JEL (Journal of Economic Literature)</a> codes. The classifications are hierarchical: the codes consist of a letter (main category) followed by two numbers (subcategories). An example JEL code is the following:</p> <ul> <li>J: Labor and demographic economics <ul> <li>J2: Time Allocation, Work Behavior, and Employment Determination and Creation; Human capital <ul> <li>J22: Time allocation and Labor supply</li> </ul> </li> </ul> </li> </ul> <p>Almost all of the articles published in the field of economics (and most of the working papers too) are associated with usually 2-5 (self-declared) JEL codes. With this information in mind, the layout of the network is clear:</p> <ul> <li>nodes will represent the subfields of economics (JEL codes), and</li> <li>edges will represent articles in which a pair of JEL codes is featured simultaneously (or more specifically, the weight of the edges will represent the number of papers in which a pair of JEL codes is featured together).</li> </ul> <p>All we need now is the data: a bunch of articles identifiers with the associated JEL codes.</p> <h2 id="getting-the-data">Getting the data</h2> <h3 id="can-we-just-scrape-it">Can we just scrape it?</h3> <p>At the time of this project we were studying at the Central European University, and therefore had access to <em>EconLit</em>, an index from the American Economic Association. The problem was that the service the university signed up for was designed for searching articles through services like <em>EBSCOhost</em> and viewing them one-by one, not for downloading bulk information. But if we can view them one-by-one, Python can also do the same. There is no need for us to sit there, it is a classic job for web scraping.</p> <p>Or is it?</p> <p>Regarding web scraping, the first question should always be whether we can do it. Not in the sense that ‘are we capable to do it?’ - we most likely are. It might take a bit of poking around and trial and error, but (with the possible exception of CAPTCHAs and some other advanced anti-scraping measures) a script can usually simulate a human well enough to in order to harvest data. The more difficult (for most peaople trying to write a web scraper anyways) question is legal: are we allowed to do it?</p> <p>The problem is that web scraping is often a legal grey zone. Contrary to common sense, harvesting the data from a webpage using a script might be legally problematic even if doing so by hand would be perfectly fine. And in some cases, even doing it by hand may be prohibited! Also, the consequences can be quite serious if the owner of the data decides to seek legal action. <a href="https://benbernardblog.com/web-scraping-and-crawling-are-perfectly-legal-right/">This article</a> is a highly recommended read for anyone considering web scraping.</p> <p>To see if we are in the clear with this project, let’s start with the obvious: reading the <a href="https://www.ebsco.com/terms-of-use">terms of service</a>. For us, the relevant part is I.C:</p> <blockquote> <p>Licensee and Authorized Users agree to abide by the Copyright Act of 1976 […] <strong>Downloading all or parts of the Databases or Services in a systematic or regular manner</strong> so as to create a collection of materials comprising all or part of the Databases or Services <strong>is strictly prohibited</strong> whether or not such collection is in electronic or print form. <strong>Notwithstanding the above restrictions, this paragraph shall not restrict the use of the materials under the doctrine of “fair use”</strong> as defined under the laws of the United States. Publishers may impose their own conditions of use applicable only to their content. […]</p> </blockquote> <p>There are two important parts here:</p> <ul> <li>According to the first part, what we are trying to do is strictly prohibited.</li> <li>However, the first part does not restrict the use of materials falling under <em>fair use</em>.</li> </ul> <p>Now <a href="https://guides.nyu.edu/fairuse">fair use</a> is a grey area in itself: it has no well defined boundaries, and the actual outcome of a lawsuit concerning it might very well depend on the interpretation of the court. However, in this case there are a few circumstances that point to our project being fair use:</p> <ul> <li>published works and factual, non-fiction works are more likely to qualify for fair use</li> <li>the use most likely does not result in economic harm to the creator or copyright owner</li> <li>it is used to create a derivative work</li> <li>it is used for research purposes</li> <li>the downloaded dataset will not be made public</li> </ul> <p>Still, as fair use is not a well-defined category, in cases such as this, contacting the copyright/website owner might be a good idea. Also, although I am pretty confident that it was actually fair use, I am not a lawyer, so I could be completely and utterly wrong, and my reasoning may not be worth a pair of dingo’s kidneys. The point is, take the stuff I write with a grain of salt. (Taking any legal advice you get from strangers on the internet with a grain of salt might also be a good general rule.)</p> <p>Also, I am sorry about not sharing the resulting dataset. I would really like to, as it has many possibilities for research and visualization, but I don’t want to risk it. If <a href="https://digitalcommons.law.scu.edu/cgi/viewcontent.cgi?referer=https://benbernardblog.com/&amp;httpsredir=1&amp;article=2261&amp;context=historical">LinkedIn went after anonymous people scraping their site this seriously</a>, I would not like to be on the wrong side of <a href="https://arstechnica.com/tech-policy/2017/06/scientific-research-piracy-site-hit-with-15-million-fine/">academic publishers</a> and service providers.</p> <h3 id="lets-just-scrape-it">Let’s just scrape it!</h3> <p>Now that we are past the poring part, it is time to get to the actual programming. One last warning though: I am not sharing this code to use it for scraping EBSCOhost specifically - I just want to illustrate how programmatically downloading complex sites can be done.</p> <p>Scraping EBSCOhost is going to more challenging than doing the same with a simple static html resource. We will have to deal with user sessions, AJAX and such complications. In such a case, the elegant solution would be familiarizing ourselves with the site in order to replicate the necessary AJAX calls, and use a simple HTTP library such as <code class="language-plaintext highlighter-rouge">requests</code> to download make the, well, requests. In this particular case however, automating an actual web browser seemed like a much simpler (albeit probably slower, but one should not make too many requests too fast anyways) thing to do. The way EBSCOhost search works makes this strategy especially productive.</p> <p>Now would be the time to include some screenshots of the site in question, but, alas, I do not have any, and do not have access to this service anymore. However, the most important aspects about how it works (or worked in 2015) can be easily summarized. You can make a search by using a set of filters, and you will get a paginated view of the resulting articles (just like google, really). If you click on one of them, you will get its details (such as the JEL codes, yay!) - no surprises this far. The best part come now: when a result is open, there are previous and next article buttons at the bottom of the page, with which you can cycle through the <em>search results</em>! Also, the link when an article is open can be safely copied to another browser, and you get the exact same situation (same search parameters, same article).</p> <p>So in theory, the procedure should be quite simple:</p> <ol> <li>Use your favourite browser to make a search with the desired filters (say, all articles published in 2014)</li> <li>Open the first result</li> <li>Navigate to the link of the first result using an automated browser</li> <li>Keep saving the information on the current page and pressing the next button until no more articles are left</li> </ol> <p>As there are going to be plenty of exceptions (internet connection error, expired session, etc.), it might be useful to make the scraper object a <em>context manager</em>, so that all resources are closed in case of an exception without the excessive use of <code class="language-plaintext highlighter-rouge">try...catch</code> blocks. Doing so only requires us to declare an <code class="language-plaintext highlighter-rouge">__enter__</code> and an <code class="language-plaintext highlighter-rouge">__exit__</code> method. The nice thing is that the latter will be executed even if an exception occurs.</p> <p>The downloaded data is going to be stored in an SQLite database, and I am going to use <code class="language-plaintext highlighter-rouge">PhantomJS</code> automated by <code class="language-plaintext highlighter-rouge">selenium</code> as my web browser (Mr. Browser). The class starts like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">sqlite3</span>
<span class="kn">from</span> <span class="n">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">from</span> <span class="n">selenium.common.exceptions</span> <span class="kn">import</span> <span class="n">NoSuchElementException</span>
<span class="kn">from</span> <span class="n">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="kn">import</span> <span class="n">re</span>

<span class="k">class</span> <span class="nc">EbscoScraper</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">start_url</span><span class="p">,</span> <span class="n">database_path</span><span class="p">,</span> <span class="n">first_parsed</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>

        <span class="n">self</span><span class="p">.</span><span class="n">start_url</span> <span class="o">=</span> <span class="n">start_url</span>
        <span class="n">self</span><span class="p">.</span><span class="n">database_path</span> <span class="o">=</span> <span class="n">database_path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">parsed</span> <span class="o">=</span> <span class="n">first_parsed</span>

        <span class="n">self</span><span class="p">.</span><span class="n">conn</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">conn</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">init_database</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">init_browser</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">parsed</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">load_next_page</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">self</span>    

    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">conn</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">none</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span><span class="p">.</span><span class="nf">quit</span><span class="p">()</span>
</code></pre></div></div> <p>Nothing surprising in these methods. The constructor method needs a starting URL and a file path for the database. (The optional argument is there because it often happens that the last loaded article is successfully parsed, but the next one cannot be loaded. In that case, we want to restart it from the last known url, but do not want to parse and store it again.) The <code class="language-plaintext highlighter-rouge">__enter__</code> method initializes the database connection and the (headless) browser. Finally, the <code class="language-plaintext highlighter-rouge">__exit__</code> method closes both of them.</p> <p>Next, the methods handling the database. The <code class="language-plaintext highlighter-rouge">CREATE TABLE IF NOT EXISTS</code> ensures that the same function can be used for creating a new database and reopening an existing one.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">init_database</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Open the connection to an sqlite database, and create the table articles
           if it does not exist.</span><span class="sh">"""</span>
        <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">database_path</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>
        <span class="n">c</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'''</span><span class="s">CREATE TABLE IF NOT EXISTS articles
                     (an INTEGER, author TEXT, title TEXT, jel TEXT, keywords TEXT)</span><span class="sh">'''</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
            
    <span class="k">def</span> <span class="nf">enter_into_db</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dct</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Enter data from a dictionary into the open sqlite database.</span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">'''</span><span class="s">INSERT INTO articles (an, author, title, jel, keywords)
                            VALUES (?, ?, ?, ?, ?)</span><span class="sh">'''</span><span class="p">,</span> 
                            <span class="p">(</span><span class="n">dct</span><span class="p">[</span><span class="sh">'</span><span class="s">an</span><span class="sh">'</span><span class="p">],</span> <span class="n">dct</span><span class="p">[</span><span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">],</span> <span class="n">dct</span><span class="p">[</span><span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">],</span> <span class="n">dct</span><span class="p">[</span><span class="sh">'</span><span class="s">jel</span><span class="sh">'</span><span class="p">],</span> <span class="n">dct</span><span class="p">[</span><span class="sh">'</span><span class="s">keywords</span><span class="sh">'</span><span class="p">])</span>
                      <span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">conn</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
        <span class="k">except</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">OperationalError</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Writing into the database has failed</span><span class="sh">'</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">current url: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span><span class="p">.</span><span class="n">current_url</span><span class="p">))</span>
            <span class="k">raise</span>
</code></pre></div></div> <p>Then the methods to control the browser. Both are quite self explanatory: <code class="language-plaintext highlighter-rouge">init_browser</code> opens a browser and loads the page under <code class="language-plaintext highlighter-rouge">start_url</code>, while <code class="language-plaintext highlighter-rouge">load_next_page</code> clicks the next article button. If it cannot find the button, we are probably not on the expected page. In that case it makes a screenshot, and reraises the exception to make the scraping stop.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">init_browser</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Initialize the browser and open the page under start_url.</span><span class="sh">"""</span>
        <span class="n">mr_browser</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="nc">PhantomJS</span><span class="p">()</span>
        <span class="n">mr_browser</span><span class="p">.</span><span class="nf">set_window_size</span><span class="p">(</span><span class="mi">1280</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
        <span class="n">mr_browser</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">start_url</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">mr_browser</span>
        
    <span class="k">def</span> <span class="nf">load_next_page</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Find and click on the next article button.</span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">next_btn</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span><span class="p">.</span><span class="nf">find_element_by_id</span><span class="p">(</span>
                <span class="sh">'</span><span class="s">ctl00_ctl00_MainContentArea_MainContentArea_topNavControl_btnNext</span><span class="sh">'</span>
                <span class="p">)</span>
            <span class="n">next_btn</span><span class="p">.</span><span class="nf">click</span><span class="p">()</span>
        <span class="k">except</span> <span class="n">NoSuchElementException</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span><span class="p">.</span><span class="n">current_url</span> <span class="o">==</span> <span class="sh">'</span><span class="s">about:blank</span><span class="sh">'</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Please check your internet connection.</span><span class="sh">'</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span><span class="p">.</span><span class="nf">save_screenshot</span><span class="p">(</span><span class="sh">'</span><span class="s">error.png</span><span class="sh">'</span><span class="p">)</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The page is not as expected, screenshot saved.</span><span class="sh">'</span><span class="p">)</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">url: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span><span class="p">.</span><span class="n">current_url</span><span class="p">))</span>
            <span class="k">raise</span>
</code></pre></div></div> <p>We use <code class="language-plaintext highlighter-rouge">BeautifulSoup4</code> to parse the page, find the necessary elements, and extract the information. One only needs to inspect the source HTML/XML to do it. The most important fields we pull are the JEL codes (obviously), the keywords and the authors, as all of these can be used to construct various networks.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">parse_page</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>

        <span class="n">soup</span> <span class="o">=</span> <span class="nc">BeautifulSoup</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span><span class="p">.</span><span class="n">page_source</span><span class="p">)</span>

        <span class="n">dt_tags</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="nf">find_all</span><span class="p">(</span><span class="sh">'</span><span class="s">dt</span><span class="sh">'</span><span class="p">,</span> <span class="n">attrs</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">data-auto</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">citation_field_label</span><span class="sh">'</span><span class="p">})</span>
        <span class="n">field_names</span> <span class="o">=</span> <span class="p">[</span><span class="n">tag</span><span class="p">.</span><span class="n">string</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">dt_tags</span><span class="p">]</span>

        <span class="n">dd_tags</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="nf">find_all</span><span class="p">(</span><span class="sh">'</span><span class="s">dd</span><span class="sh">'</span><span class="p">,</span> <span class="n">attrs</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">data-auto</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">citation_field_value</span><span class="sh">'</span><span class="p">})</span>
        <span class="n">field_values</span> <span class="o">=</span> <span class="p">[</span><span class="n">tag</span><span class="p">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">dd_tags</span><span class="p">]</span>

        <span class="n">pagedict</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">field_names</span><span class="p">,</span> <span class="n">field_values</span><span class="p">))</span>

        <span class="n">needed_fields</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Accession Number</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Author</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Descriptors</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Keywords</span><span class="sh">'</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">needed_fields</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">field</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pagedict</span><span class="p">.</span><span class="nf">keys</span><span class="p">():</span>
                <span class="n">pagedict</span><span class="p">[</span><span class="n">field</span><span class="p">]</span> <span class="o">=</span> <span class="sh">''</span>

        <span class="n">re_pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">\([A-Z]\d\d\)</span><span class="sh">'</span>
        <span class="n">descriptors_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">re_pattern</span><span class="p">,</span> <span class="n">pagedict</span><span class="p">[</span><span class="sh">'</span><span class="s">Descriptors</span><span class="sh">'</span><span class="p">])]</span>
        <span class="n">descriptors</span> <span class="o">=</span> <span class="sh">'</span><span class="s">; </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">descriptors_list</span><span class="p">)</span>
        <span class="n">keywords</span> <span class="o">=</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">pagedict</span><span class="p">[</span><span class="sh">'</span><span class="s">Keywords</span><span class="sh">'</span><span class="p">].</span><span class="nf">split</span><span class="p">())</span>
        
        <span class="n">finaldict</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">an</span><span class="sh">'</span><span class="p">:</span> <span class="n">pagedict</span><span class="p">[</span><span class="sh">'</span><span class="s">Accession Number</span><span class="sh">'</span><span class="p">],</span>
                     <span class="sh">'</span><span class="s">author</span><span class="sh">'</span><span class="p">:</span> <span class="n">pagedict</span><span class="p">[</span><span class="sh">'</span><span class="s">Author</span><span class="sh">'</span><span class="p">],</span>
                     <span class="sh">'</span><span class="s">title</span><span class="sh">'</span><span class="p">:</span> <span class="n">pagedict</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">],</span>
                     <span class="sh">'</span><span class="s">jel</span><span class="sh">'</span><span class="p">:</span> <span class="n">descriptors</span><span class="p">,</span>
                     <span class="sh">'</span><span class="s">keywords</span><span class="sh">'</span><span class="p">:</span> <span class="n">keywords</span>
                     <span class="p">}</span>
                     
        <span class="k">return</span> <span class="n">finaldict</span>
</code></pre></div></div> <p>Finally, we go through all of the pages and save the relevant information one by one. We do this in a loop.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">parse_n_pages</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">num_of_pages</span><span class="p">,</span> <span class="n">interval</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Load and parse num_of_pages search results, including the current page.</span><span class="sh">"""</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_of_pages</span><span class="p">):</span>

            <span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

            <span class="n">dct</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">parse_page</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">all</span><span class="p">([</span><span class="n">key</span> <span class="o">==</span> <span class="sh">''</span> <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">dct</span><span class="p">.</span><span class="nf">keys</span><span class="p">()]):</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">enter_into_db</span><span class="p">(</span><span class="n">dct</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">No useful information on {}.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">mr_browser</span><span class="p">.</span><span class="n">current_url</span><span class="p">))</span>

            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_of_pages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">load_next_page</span><span class="p">()</span>

            <span class="nf">if </span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">50</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">{} of {} articles parsed and saved.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">num_of_pages</span><span class="p">))</span>

            <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">t0</span> <span class="o">+</span> <span class="n">interval</span> <span class="o">-</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()))</span>
        
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Finished saving and parsing all {} articles.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">num_of_pages</span><span class="p">))</span>
</code></pre></div></div> <p>The scraper is ready for action now. It can be used like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nc">EbscoScraper</span><span class="p">(</span><span class="n">start_url</span><span class="p">,</span> <span class="n">database_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">mr_scraper</span><span class="p">:</span>
    <span class="n">mr_scraper</span><span class="p">.</span><span class="nf">parse_n_pages</span><span class="p">(</span><span class="n">num_of_pages</span><span class="p">)</span>
</code></pre></div></div> <p>Let it run for some hours, restart it a few times if it stops, and you will have the data in a convinient SQLite format. In our case, data on 37320 articles (all of the EBSCO search results for articles published in 2014).</p> <p>In the next part of the series, I will continue with making a network out of this data, and visualizing that network. Stay tuned!</p>]]></content><author><name></name></author><category term="network"/><category term="web"/><category term="scraping"/><category term="python"/><category term="EconLit"/><category term="EBSCOhost"/><summary type="html"><![CDATA[Back in 2015 Olena Chystiakova and I did a project for a Network Science course that might be interesting from a web scraping or data visualization perspective. I am going to present this project in a series of three short articles: I will start with getting the data (web scraping), continue with the visualization of the network, and conclude with modelling the network (the actual network science stuff). This is the first part of the series.]]></summary></entry><entry><title type="html">Visualizing public transport</title><link href="https://stanmart.github.io/blog/2018/bkk-datashader/" rel="alternate" type="text/html" title="Visualizing public transport"/><published>2018-10-17T00:00:00+00:00</published><updated>2018-10-17T00:00:00+00:00</updated><id>https://stanmart.github.io/blog/2018/bkk-datashader</id><content type="html" xml:base="https://stanmart.github.io/blog/2018/bkk-datashader/"><![CDATA[<p>Plotting stuff is fun. Plotting stuff on top of maps is even more fun. Even better, using modern Python visualizaton libraries, plotting on top of maps is simple, too.</p> <p>Plotting large datasets is also a lot of fun, but sadly, it is difficult. One has to fiddle with sampling, opacity, and various parameters to visualize datasets over a million points. Isn’t there a better way?</p> <p>As it turns out, there is. The extraordinary <code class="language-plaintext highlighter-rouge">datashader</code> library made by the people at Anaconda Inc might be a game changer for meaningfully visualizing large datasets. This write up is inspired by the <a href="http://datashader.org/topics/nyc_taxi.html">NYC taxi example</a> at the wonderful <a href="http://pyviz.org/">PyViz</a> website.</p> <p>On one hand, I did this project to familiarize myself with the <code class="language-plaintext highlighter-rouge">datashader</code> library, and on the other hand, I wanted to make use of the plenty of data published by the Centre for Budapest Transport (BKK). The next few paragraphs can be viewed as a tutorial on making spatial plots with <code class="language-plaintext highlighter-rouge">datashader</code>, or as an (admittedly superficial) description of Budapest’s public transport system.</p> <h2 id="first-approach-using-gtfs-data">First approach: using GTFS data</h2> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bkk/bkk-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bkk/bkk-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bkk/bkk-1400.webp"/> <img src="/assets/img/bkk/bkk.png" width="300" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The Centre for Budapest Transport (BKK) makes its timetables available in the widely used and public GTFS format (General Transit Feed Specification) to make creating public transport related applications easy for developers. However, this very same data can also be used to analyze and visualize the public transport system of Budapest.</p> <p>The GTFS format is a simple database: a zip files containing a set of comma-separated csv files which can be joined to each other based on some key columns. Let us start by downloading the most current timetable and looking at its contents.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">shutil</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">zipfile</span>

<span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">http://www.bkk.hu/gtfs/budapest_gtfs.zip</span><span class="sh">'</span><span class="p">,</span> <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">budapest_gtfs.zip</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="n">shutil</span><span class="p">.</span><span class="nf">copyfileobj</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">raw</span><span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
    
<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="sh">'</span><span class="s">./data</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="sh">'</span><span class="s">./data</span><span class="sh">'</span><span class="p">)</span>
    
<span class="k">with</span> <span class="n">zipfile</span><span class="p">.</span><span class="nc">ZipFile</span><span class="p">(</span><span class="sh">'</span><span class="s">budapest_gtfs.zip</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="nb">file</span><span class="p">.</span><span class="nf">extractall</span><span class="p">(</span><span class="sh">'</span><span class="s">./data</span><span class="sh">'</span><span class="p">)</span>

<span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="sh">'</span><span class="s">./data</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['agency.txt',
 'calendar_dates.txt',
 'feed_info.txt',
 'pathways.txt',
 'routes.txt',
 'shapes.txt',
 'stops.txt',
 'stop_times.txt',
 'trips.txt']
</code></pre></div></div> <p>It is possible that you will not be able to download the above file if you are outside of Hungary. You can then either try a VPN, or get the version that I downloaded on 14th October 2018 from <a href="https://drive.google.com/open?id=1WZ3um5GOfhCq6l_aXWxiCrh_BX2qiufO">here</a> (Google Drive link, might not be up indefinitely).</p> <p>The files that are going to be relevant for us in order to create a map are:</p> <ul> <li><code class="language-plaintext highlighter-rouge">trips.txt</code> which contained every scheduled trip line-by-line and</li> <li><code class="language-plaintext highlighter-rouge">shapes.txt</code> which is a spatial description of each route (longitude and latitude information).</li> </ul> <p>The two tables are linked by <code class="language-plaintext highlighter-rouge">shape_id</code>, which is the primary key of the shapes table. Let’s load the files and look at the data!</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">trips</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">data/trips.txt</span><span class="sh">'</span><span class="p">,</span> <span class="n">low_memory</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">shapes</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">data/shapes.txt</span><span class="sh">'</span><span class="p">,</span> <span class="n">low_memory</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">trips</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <table> <thead> <tr> <th>route_id</th> <th>trip_id</th> <th>service_id</th> <th>…</th> <th>shape_id</th> <th>…</th> <th>boarding_door</th> </tr> </thead> <tbody> <tr> <td>8140</td> <td>B0571610</td> <td>B05716AHPKP-0011</td> <td>…</td> <td>Y701</td> <td>…</td> <td>2.0</td> </tr> <tr> <td>8140</td> <td>B0571611</td> <td>B05716AHPKP-0011</td> <td>…</td> <td>Y702</td> <td>…</td> <td>2.0</td> </tr> <tr> <td>8140</td> <td>B0571612</td> <td>B05716AHPKP-0011</td> <td>…</td> <td>Y701</td> <td>…</td> <td>2.0</td> </tr> <tr> <td>8140</td> <td>B0571613</td> <td>B05716AHPKP-0011</td> <td>…</td> <td>Y702</td> <td>…</td> <td>2.0</td> </tr> <tr> <td>8140</td> <td>B0571614</td> <td>B05716AHPKP-0011</td> <td>…</td> <td>Y701</td> <td>…</td> <td>2.0</td> </tr> </tbody> </table> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shapes</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <table> <thead> <tr> <th>shape_id</th> <th>shape_pt_sequence</th> <th>shape_pt_lat</th> <th>shape_pt_lon</th> <th>shape_dist_traveled</th> </tr> </thead> <tbody> <tr> <td>0285</td> <td>100001</td> <td>47.519630</td> <td>19.148313</td> <td>0.0</td> </tr> <tr> <td>0285</td> <td>100002</td> <td>47.519657</td> <td>19.148286</td> <td>4.0</td> </tr> <tr> <td>0285</td> <td>100003</td> <td>47.519839</td> <td>19.148638</td> <td>35.0</td> </tr> <tr> <td>0285</td> <td>100004</td> <td>47.520584</td> <td>19.150246</td> <td>182.0</td> </tr> <tr> <td>0285</td> <td>100005</td> <td>47.520674</td> <td>19.150432</td> <td>199.0</td> </tr> </tbody> </table> <p>Looks simple enough. If we would like to plot the trafic of the transit network, we just have to aggregate the <code class="language-plaintext highlighter-rouge">trips</code> table by counting the number of lines by <code class="language-plaintext highlighter-rouge">shape_id</code>, join the two tables by <code class="language-plaintext highlighter-rouge">shape_id</code>, and make a line plot.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_trips_by_shape</span> <span class="o">=</span> <span class="n">trips</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">shape_id</span><span class="sh">'</span><span class="p">).</span><span class="nf">aggregate</span><span class="p">({</span><span class="sh">'</span><span class="s">route_id</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">}).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">num_trips_by_shape</span><span class="p">.</span><span class="nf">rename</span><span class="p">({</span><span class="sh">'</span><span class="s">route_id</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">trip_count</span><span class="sh">'</span><span class="p">},</span> <span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">columns</span><span class="sh">'</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">shapes_with_nums</span> <span class="o">=</span> <span class="n">shapes</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">num_trips_by_shape</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">shape_id</span><span class="sh">'</span><span class="p">)</span>
<span class="n">shapes_with_nums</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <table> <thead> <tr> <th>shape_id</th> <th>shape_pt_sequence</th> <th>shape_pt_lat</th> <th>shape_pt_lon</th> <th>shape_dist_traveled</th> <th>trip_count</th> </tr> </thead> <tbody> <tr> <td>0285</td> <td>100001</td> <td>47.519630</td> <td>19.148313</td> <td>0.0</td> <td>6</td> </tr> <tr> <td>0285</td> <td>100002</td> <td>47.519657</td> <td>19.148286</td> <td>4.0</td> <td>6</td> </tr> <tr> <td>0285</td> <td>100003</td> <td>47.519839</td> <td>19.148638</td> <td>35.0</td> <td>6</td> </tr> <tr> <td>0285</td> <td>100004</td> <td>47.520584</td> <td>19.150246</td> <td>182.0</td> <td>6</td> </tr> <tr> <td>0285</td> <td>100005</td> <td>47.520674</td> <td>19.150432</td> <td>199.0</td> <td>6</td> </tr> </tbody> </table> <p>We are almost there, only two minor details are missing.</p> <p>First, if we would like to use map tiles as a background for our plots, we will have to convert the latitute-longitude data to Web-Mercator coordinates, as Bokeh can only handle the latter. Fortunately, there is a handy function in the <code class="language-plaintext highlighter-rouge">datashader</code> package to do just this.</p> <p>The second issue is that if we were to make a line plot of the above database as it is, the last point of each shape would be connected to the first point of the next shape. We can avoid this by inserting a row of <code class="language-plaintext highlighter-rouge">NaN</code>s between each shape.</p> <p>The next block deals with these problems.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">datashader.utils</span> <span class="kn">import</span> <span class="n">lnglat_to_meters</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">shapes_with_nums</span><span class="p">[</span><span class="sh">'</span><span class="s">coord_x</span><span class="sh">'</span><span class="p">],</span> <span class="n">shapes_with_nums</span><span class="p">[</span><span class="sh">'</span><span class="s">coord_y</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> \
    <span class="nf">lnglat_to_meters</span><span class="p">(</span><span class="n">shapes_with_nums</span><span class="p">[</span><span class="sh">'</span><span class="s">shape_pt_lon</span><span class="sh">'</span><span class="p">],</span> <span class="n">shapes_with_nums</span><span class="p">[</span><span class="sh">'</span><span class="s">shape_pt_lat</span><span class="sh">'</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">split_df_by</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">byvar</span><span class="p">):</span>
    <span class="n">df_parts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">level</span><span class="p">,</span> <span class="n">df_part</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="n">byvar</span><span class="p">):</span>
        <span class="n">empty</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">([[</span><span class="n">level</span> <span class="k">if</span> <span class="n">colname</span> <span class="o">==</span> <span class="n">byvar</span> <span class="k">else</span> <span class="n">np</span><span class="p">.</span><span class="n">NaN</span> <span class="k">for</span> <span class="n">colname</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">]],</span>
                             <span class="n">columns</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>
        <span class="n">df_parts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">df_part</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">empty</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="n">df_parts</span><span class="p">)</span> 

<span class="n">sep_shapes</span> <span class="o">=</span> <span class="nf">split_df_by</span><span class="p">(</span><span class="n">shapes_with_nums</span><span class="p">,</span> <span class="sh">'</span><span class="s">shape_id</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>Everything is set, now on to the plot!</p> <p>We will do it in four steps:</p> <ol> <li>We create a bokeh figure, and hide grids and axes for aesthetic reasons.</li> <li>Next, we add map tiles to this figure using <code class="language-plaintext highlighter-rouge">bokeh</code>’s <code class="language-plaintext highlighter-rouge">WMTSTileSource</code> function and an XYZ map source.</li> <li>Then we define a callback function that wraps up <code class="language-plaintext highlighter-rouge">datashader</code> plotting steps, and returns a datashaded image given plot ranges and figure size. These steps are the following: <ol> <li>Create a canvas with the given ranges (in coordinates) and size (in pixels)</li> <li>Plot the lines and aggregate to the pixel level. Here we use the sum of trip counts, as we are interested in the number of vehicles per day at a given location.</li> <li>Then we transform the aggregates into an image by shading according to a colormap and a link function (in this case, colors will mean percentiles as a result of using <code class="language-plaintext highlighter-rouge">'eq_hist'</code>).</li> </ol> </li> <li>Finally, we use the <code class="language-plaintext highlighter-rouge">InteractiveImage</code> function from <code class="language-plaintext highlighter-rouge">datashader</code> to link the plot and the data shading steps, and display the figure.</li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">bokeh.plotting</span> <span class="k">as</span> <span class="n">bp</span>
<span class="kn">from</span> <span class="n">bokeh.models.tiles</span> <span class="kn">import</span> <span class="n">WMTSTileSource</span>
<span class="kn">import</span> <span class="n">datashader</span> <span class="k">as</span> <span class="n">ds</span>
<span class="kn">import</span> <span class="n">datashader.transfer_functions</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">from</span> <span class="n">datashader.bokeh_ext</span> <span class="kn">import</span> <span class="n">InteractiveImage</span>
<span class="kn">from</span> <span class="n">datashader.utils</span> <span class="kn">import</span> <span class="n">export_image</span>
<span class="kn">import</span> <span class="n">colorcet</span> <span class="k">as</span> <span class="n">cc</span>

<span class="n">bp</span><span class="p">.</span><span class="nf">output_notebook</span><span class="p">()</span>

<span class="n">x_range</span><span class="o">=</span><span class="p">(</span><span class="mf">2.101e6</span><span class="p">,</span> <span class="mf">2.155e6</span><span class="p">)</span>
<span class="n">y_range</span><span class="o">=</span><span class="p">(</span><span class="mf">5.994e6</span><span class="p">,</span> <span class="mf">6.052e6</span><span class="p">)</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="sh">'</span><span class="s">./img</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="sh">'</span><span class="s">./img</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">bp</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="sh">'</span><span class="s">pan,wheel_zoom,reset</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">plot_width</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="mi">600</span><span class="p">),</span>
              <span class="n">plot_height</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="mi">600</span><span class="p">),</span>
              <span class="n">x_range</span><span class="o">=</span><span class="n">x_range</span><span class="p">,</span>
              <span class="n">y_range</span><span class="o">=</span><span class="n">y_range</span><span class="p">)</span>

<span class="n">p</span><span class="p">.</span><span class="n">axis</span><span class="p">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">p</span><span class="p">.</span><span class="n">xgrid</span><span class="p">.</span><span class="n">grid_line_color</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">p</span><span class="p">.</span><span class="n">ygrid</span><span class="p">.</span><span class="n">grid_line_color</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://cartodb-basemaps-b.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png</span><span class="sh">"</span>
<span class="n">tile_renderer</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">add_tile</span><span class="p">(</span><span class="nc">WMTSTileSource</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">))</span>
<span class="n">tile_renderer</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">image_callback</span><span class="p">(</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">color_fn</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">shade</span><span class="p">):</span>
    <span class="n">cvs</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="nc">Canvas</span><span class="p">(</span><span class="n">plot_width</span><span class="o">=</span><span class="n">w</span><span class="p">,</span> <span class="n">plot_height</span><span class="o">=</span><span class="n">h</span><span class="p">,</span> <span class="n">x_range</span><span class="o">=</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="o">=</span><span class="n">y_range</span><span class="p">)</span>
    <span class="n">agg</span> <span class="o">=</span> <span class="n">cvs</span><span class="p">.</span><span class="nf">line</span><span class="p">(</span><span class="n">sep_shapes</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_x</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_y</span><span class="sh">'</span><span class="p">,</span> <span class="n">agg</span><span class="o">=</span><span class="n">ds</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="sh">'</span><span class="s">trip_count</span><span class="sh">'</span><span class="p">))</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">shade</span><span class="p">(</span><span class="n">agg</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cc</span><span class="p">.</span><span class="n">fire</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">image</span>

<span class="nf">export_image</span><span class="p">(</span><span class="nf">image_callback</span><span class="p">(</span><span class="n">x_range</span><span class="o">=</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="o">=</span><span class="n">y_range</span><span class="p">,</span> <span class="n">w</span><span class="o">=</span><span class="mi">2000</span><span class="p">,</span> <span class="n">h</span><span class="o">=</span><span class="mi">2000</span><span class="p">),</span>
             <span class="n">filename</span><span class="o">=</span><span class="sh">"</span><span class="s">BUD_schedule_fire</span><span class="sh">"</span><span class="p">,</span> <span class="n">background</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
<span class="nc">InteractiveImage</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">image_callback</span><span class="p">)</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bkk/plot1_snip-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bkk/plot1_snip-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bkk/plot1_snip-1400.webp"/> <img src="/assets/img/bkk/plot1_snip.png" width="600" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The image you see on this webpage is just a static image due to the limitations of the site engine (or more accurately, my inability to make it work with Bokeh plots), but if you run this example in a notebook, you can pan and zoom interactively. Furthermore, the datashading callback function is run each time, so you get a nicely shaded picture with meaningful colors every time.</p> <h2 id="second-approach-using-gps-data">Second approach: using GPS data</h2> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bkk/futar_logo-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bkk/futar_logo-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bkk/futar_logo-1400.webp"/> <img src="/assets/img/bkk/futar_logo.jpg" width="300" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>In the first part we managed to plot the number of vehicles scheduled to pass through each location on a given day. It is informative as it is, but it does not really represent the average number of vehicles at a given location and at a given time. There are multiple reasons for this. Clearly, the schedule is just a plan, and the actual routes and stop times might vary due to delays an unforeseen events. A more subtle reason is that vehicles do not spend the time on a given route evenly. They spend more time where they must go slower, spend time in stops and spend even more time in terminals.</p> <p>Whether we are interested in the number of vehicles passing or the average number of vehicles at a given location (or alternatively, the probability density of vehicle locations) depends on the question we are trying to answer. For example, if we are analysing the amortization of the road surface, the former metric seems quite useful. On the other hand, if we would like to say something about air pollution, the latter one is the way to go.</p> <p>To plot the density of vehicle loccations, we need different data: the locations of vehicles during a given day. Furtunately, in addition to publishing the timetables in GTFS format, BKK also track the location of its buses, trolleybuses trams and ferries in real time (sadly, no data on the metro), so that websites and applications <a href="http://futar.bkk.hu/?map=16/47.50955/19.03137&amp;layers=GSVB">like this</a> are possible. We can use it to query tthe location of each active vehicle at a regular interval, and then we can simply make a scatterplot of the resulting (quite sizeable) database. It is exactly what I have done (apart from a five-minute-long internet hiatus), and you can download the data in a zipped csv <a href="https://drive.google.com/file/d/1lx9pN1TURCczB2rbcJaFU1Eg42gonmZu/view?usp=sharing">from here</a> (Google Drive link, might not be up indefinitely).</p> <p>If you are feeling adventurous, you can also try getting the data for yourself. You can find some details on how to do this at the end of this post.</p> <p>Let us start by looking at our data!</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">futar</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">C:/bkkdata/vfl_data.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">cp1250</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">futar</span><span class="p">))</span>
<span class="n">futar</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>11054989
</code></pre></div></div> <table> <thead> <tr> <th>Unnamed: 0</th> <th>…</th> <th>lastUpdateTime</th> <th>licensePlate</th> <th>location</th> <th>model</th> <th>…</th> <th>vehicleRouteType</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>…</td> <td>1539671351</td> <td>LOV870</td> <td>{‘lat’: 47.44018, ‘lon’: 19.09628}</td> <td>VanHool AG318 csuklós autóbusz</td> <td>…</td> <td>BUS</td> </tr> <tr> <td>1</td> <td>…</td> <td>1539671354</td> <td>V1440</td> <td>{‘lat’: 47.483326, ‘lon’: 19.053127}</td> <td>Ganz csuklós</td> <td>…</td> <td>TRAM</td> </tr> <tr> <td>2</td> <td>…</td> <td>1539671350</td> <td>V2112</td> <td>{‘lat’: 47.469288, ‘lon’: 19.082859}</td> <td>CAF 9 modulos szerelvény</td> <td>…</td> <td>TRAM</td> </tr> <tr> <td>3</td> <td>…</td> <td>1539671351</td> <td>V4334</td> <td>{‘lat’: 47.443512, ‘lon’: 19.036741}</td> <td>Tátra T5C5K</td> <td>…</td> <td>TRAM</td> </tr> <tr> <td>4</td> <td>…</td> <td>1539671367</td> <td>V1442</td> <td>{‘lat’: 47.520626, ‘lon’: 19.036764}</td> <td>Ganz csuklós</td> <td>…</td> <td>TRAM</td> </tr> </tbody> </table> <p>The only thing we need from here are the coordinates (<code class="language-plaintext highlighter-rouge">location</code>), but unfortunately they are in a rather peculiar format: a string that looks like a dictionary. Also, we will need to convert the latitudes and longitudes into Web-Mercator coordinates again. Let us sort these out and make it into a proper dataframe!</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lat_lon_df</span> <span class="o">=</span> <span class="n">futar</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="nb">str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">lats</span> <span class="o">=</span> <span class="n">lat_lon_df</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">{</span><span class="sh">'</span><span class="s">lat</span><span class="sh">'</span><span class="s">: </span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">)</span>
<span class="n">lons</span> <span class="o">=</span> <span class="n">lat_lon_df</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="sh">'</span><span class="s">lon</span><span class="sh">'</span><span class="s">: </span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">).</span><span class="nb">str</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">}</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">)</span>

<span class="n">x_coords</span><span class="p">,</span> <span class="n">y_coords</span> <span class="o">=</span> <span class="nf">lnglat_to_meters</span><span class="p">(</span><span class="n">lons</span><span class="p">,</span> <span class="n">lats</span><span class="p">)</span>
<span class="n">gps_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span><span class="sh">'</span><span class="s">coord_x</span><span class="sh">'</span><span class="p">:</span> <span class="n">x_coords</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_y</span><span class="sh">'</span><span class="p">:</span> <span class="n">y_coords</span><span class="p">})</span>
<span class="n">gps_data</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <table> <thead> <tr> <th>coord_x</th> <th>coord_y</th> </tr> </thead> <tbody> <tr> <td>2.125788e+06</td> <td>6.014221e+06</td> </tr> <tr> <td>2.120984e+06</td> <td>6.021325e+06</td> </tr> <tr> <td>2.124294e+06</td> <td>6.019013e+06</td> </tr> <tr> <td>2.119160e+06</td> <td>6.014769e+06</td> </tr> <tr> <td>2.119163e+06</td> <td>6.027471e+06</td> </tr> </tbody> </table> <p>We are set now, on to the plot! The drill is the same as before, we just replace <code class="language-plaintext highlighter-rouge">cvs.line</code> with <code class="language-plaintext highlighter-rouge">cvs.points</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">bp</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="sh">'</span><span class="s">pan,wheel_zoom,reset</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">plot_width</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="mi">600</span><span class="p">),</span>
              <span class="n">plot_height</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="mi">600</span><span class="p">),</span>
              <span class="n">x_range</span><span class="o">=</span><span class="n">x_range</span><span class="p">,</span>
              <span class="n">y_range</span><span class="o">=</span><span class="n">y_range</span><span class="p">)</span>
              
<span class="n">p</span><span class="p">.</span><span class="n">axis</span><span class="p">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">p</span><span class="p">.</span><span class="n">xgrid</span><span class="p">.</span><span class="n">grid_line_color</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">p</span><span class="p">.</span><span class="n">ygrid</span><span class="p">.</span><span class="n">grid_line_color</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://cartodb-basemaps-b.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png</span><span class="sh">"</span>
<span class="n">tile_renderer</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">add_tile</span><span class="p">(</span><span class="nc">WMTSTileSource</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">))</span>
<span class="n">tile_renderer</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">image_callback</span><span class="p">(</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">color_fn</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">shade</span><span class="p">):</span>
    <span class="n">cvs</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="nc">Canvas</span><span class="p">(</span><span class="n">plot_width</span><span class="o">=</span><span class="n">w</span><span class="p">,</span> <span class="n">plot_height</span><span class="o">=</span><span class="n">h</span><span class="p">,</span> <span class="n">x_range</span><span class="o">=</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="o">=</span><span class="n">y_range</span><span class="p">)</span>
    <span class="n">agg</span> <span class="o">=</span> <span class="n">cvs</span><span class="p">.</span><span class="nf">points</span><span class="p">(</span><span class="n">gps_data</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_x</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_y</span><span class="sh">'</span><span class="p">,</span> <span class="n">agg</span><span class="o">=</span><span class="n">ds</span><span class="p">.</span><span class="nf">count</span><span class="p">())</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">shade</span><span class="p">(</span><span class="n">agg</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cc</span><span class="p">.</span><span class="n">fire</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="nf">dynspread</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">max_px</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

<span class="nf">export_image</span><span class="p">(</span><span class="nf">image_callback</span><span class="p">(</span><span class="n">x_range</span><span class="o">=</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="o">=</span><span class="n">y_range</span><span class="p">,</span> <span class="n">w</span><span class="o">=</span><span class="mi">2000</span><span class="p">,</span> <span class="n">h</span><span class="o">=</span><span class="mi">2000</span><span class="p">),</span>
             <span class="n">filename</span><span class="o">=</span><span class="sh">"</span><span class="s">BUD_gps_fire</span><span class="sh">"</span><span class="p">,</span> <span class="n">background</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
<span class="nc">InteractiveImage</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">image_callback</span><span class="p">)</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bkk/plot2_snip-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bkk/plot2_snip-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bkk/plot2_snip-1400.webp"/> <img src="/assets/img/bkk/plot2_snip.png" width="600" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The new image is remarkably similar, but there are a few notable differences. Most notably, there are a number of white hotspots where vehicles seem to spend a lot of time. These are usually terminal stations and large traffic junctions, that did not show up this predominantly on our first picture, but must certainly have a large effect on air quality.</p> <p>Or do they? Well, that also depends on the vehicle type. Trams and trolleybuses do not really matter in this regard, while regular buses and ferries certainly do. Let’s see how the above picture looks by vehicle type: <span style="color:#0877bc"><strong>bus</strong></span>, <span style="color:#f89b00"><strong>tram</strong></span>, <span style="color:#ff212a"><strong>trolleybus</strong></span> and <span style="color:#d60080"><strong>ferry</strong></span>.</p> <p>There is not much new stuff going on here: we simply aggregate and shade a dataframe for each type of vehicle, and then merge them using <code class="language-plaintext highlighter-rouge">tf.stack</code>. Note, that unfortunately, the stacking order matters for the final picture. Also, as each part is shaded separately, the densities are going to be displayed according to their relative (conditional) densities.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_bus</span> <span class="o">=</span> <span class="n">gps_data</span><span class="p">[</span><span class="n">futar</span><span class="p">.</span><span class="n">vehicleRouteType</span> <span class="o">==</span> <span class="sh">'</span><span class="s">BUS</span><span class="sh">'</span><span class="p">]</span>
<span class="n">data_tram</span> <span class="o">=</span> <span class="n">gps_data</span><span class="p">[</span><span class="n">futar</span><span class="p">.</span><span class="n">vehicleRouteType</span> <span class="o">==</span> <span class="sh">'</span><span class="s">TRAM</span><span class="sh">'</span><span class="p">]</span>
<span class="n">data_trolleybus</span> <span class="o">=</span> <span class="n">gps_data</span><span class="p">[</span><span class="n">futar</span><span class="p">.</span><span class="n">vehicleRouteType</span> <span class="o">==</span> <span class="sh">'</span><span class="s">TROLLEYBUS</span><span class="sh">'</span><span class="p">]</span>
<span class="n">data_ferry</span> <span class="o">=</span> <span class="n">gps_data</span><span class="p">[</span><span class="n">futar</span><span class="p">.</span><span class="n">vehicleRouteType</span> <span class="o">==</span> <span class="sh">'</span><span class="s">FERRY</span><span class="sh">'</span><span class="p">]</span>
<span class="n">futar</span><span class="p">.</span><span class="n">vehicleRouteType</span><span class="p">.</span><span class="nf">value_counts</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BUS           8468914
TRAM          1871667
TROLLEYBUS     698070
FERRY           16338
Name: vehicleRouteType, dtype: int64
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">bp</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">tools</span><span class="o">=</span><span class="sh">'</span><span class="s">pan,wheel_zoom,reset</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">plot_width</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="mi">600</span><span class="p">),</span>
              <span class="n">plot_height</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="mi">600</span><span class="p">),</span>
              <span class="n">x_range</span><span class="o">=</span><span class="p">(</span><span class="mf">2.101e6</span><span class="p">,</span> <span class="mf">2.155e6</span><span class="p">),</span>
              <span class="n">y_range</span><span class="o">=</span><span class="p">(</span><span class="mi">6012796</span><span class="p">,</span> <span class="mi">6038876</span><span class="p">))</span>
              
<span class="n">p</span><span class="p">.</span><span class="n">axis</span><span class="p">.</span><span class="n">visible</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">p</span><span class="p">.</span><span class="n">xgrid</span><span class="p">.</span><span class="n">grid_line_color</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">p</span><span class="p">.</span><span class="n">ygrid</span><span class="p">.</span><span class="n">grid_line_color</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://cartodb-basemaps-b.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png</span><span class="sh">"</span>
<span class="n">tile_renderer</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">add_tile</span><span class="p">(</span><span class="nc">WMTSTileSource</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">))</span>
<span class="n">tile_renderer</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">image_callback</span><span class="p">(</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">color_fn</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">shade</span><span class="p">):</span>
    <span class="n">cvs</span> <span class="o">=</span> <span class="n">ds</span><span class="p">.</span><span class="nc">Canvas</span><span class="p">(</span><span class="n">plot_width</span><span class="o">=</span><span class="n">w</span><span class="p">,</span> <span class="n">plot_height</span><span class="o">=</span><span class="n">h</span><span class="p">,</span> <span class="n">x_range</span><span class="o">=</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="o">=</span><span class="n">y_range</span><span class="p">)</span>
    <span class="n">agg_bus</span> <span class="o">=</span> <span class="n">cvs</span><span class="p">.</span><span class="nf">points</span><span class="p">(</span><span class="n">data_bus</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_x</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_y</span><span class="sh">'</span><span class="p">,</span> <span class="n">agg</span><span class="o">=</span><span class="n">ds</span><span class="p">.</span><span class="nf">count</span><span class="p">())</span>
    <span class="n">agg_tram</span> <span class="o">=</span> <span class="n">cvs</span><span class="p">.</span><span class="nf">points</span><span class="p">(</span><span class="n">data_tram</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_x</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_y</span><span class="sh">'</span><span class="p">,</span> <span class="n">agg</span><span class="o">=</span><span class="n">ds</span><span class="p">.</span><span class="nf">count</span><span class="p">())</span>
    <span class="n">agg_trolleybus</span> <span class="o">=</span> <span class="n">cvs</span><span class="p">.</span><span class="nf">points</span><span class="p">(</span><span class="n">data_trolleybus</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_x</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_y</span><span class="sh">'</span><span class="p">,</span> <span class="n">agg</span><span class="o">=</span><span class="n">ds</span><span class="p">.</span><span class="nf">count</span><span class="p">())</span>
    <span class="n">agg_ferry</span> <span class="o">=</span> <span class="n">cvs</span><span class="p">.</span><span class="nf">points</span><span class="p">(</span><span class="n">data_ferry</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_x</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">coord_y</span><span class="sh">'</span><span class="p">,</span> <span class="n">agg</span><span class="o">=</span><span class="n">ds</span><span class="p">.</span><span class="nf">count</span><span class="p">())</span>
    <span class="n">image_bus</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">shade</span><span class="p">(</span><span class="n">agg_bus</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="p">[(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">111</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">188</span><span class="p">)],</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">image_tram</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">shade</span><span class="p">(</span><span class="n">agg_tram</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="p">[(</span><span class="mi">115</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">248</span><span class="p">,</span> <span class="mi">155</span><span class="p">,</span> <span class="mi">0</span><span class="p">)],</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">image_trolleybus</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">shade</span><span class="p">(</span><span class="n">agg_trolleybus</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="p">[(</span><span class="mi">136</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">42</span><span class="p">)],</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">image_ferry</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">shade</span><span class="p">(</span><span class="n">agg_ferry</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="p">[(</span><span class="mi">112</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">67</span><span class="p">),</span> <span class="p">(</span><span class="mi">214</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">128</span><span class="p">)],</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">eq_hist</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">image</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">stack</span><span class="p">(</span><span class="n">image_bus</span><span class="p">,</span> <span class="n">image_tram</span><span class="p">,</span> <span class="n">image_trolleybus</span><span class="p">,</span> <span class="n">image_ferry</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">tf</span><span class="p">.</span><span class="nf">dynspread</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">max_px</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

<span class="nf">export_image</span><span class="p">(</span><span class="nf">image_callback</span><span class="p">(</span><span class="n">x_range</span><span class="o">=</span><span class="n">x_range</span><span class="p">,</span> <span class="n">y_range</span><span class="o">=</span><span class="n">y_range</span><span class="p">,</span> <span class="n">w</span><span class="o">=</span><span class="mi">2000</span><span class="p">,</span> <span class="n">h</span><span class="o">=</span><span class="mi">2000</span><span class="p">),</span>
             <span class="n">filename</span><span class="o">=</span><span class="sh">"</span><span class="s">BUD_gps_by_type</span><span class="sh">"</span><span class="p">,</span> <span class="n">background</span><span class="o">=</span><span class="sh">'</span><span class="s">black</span><span class="sh">'</span><span class="p">)</span>
<span class="nc">InteractiveImage</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">image_callback</span><span class="p">)</span>
</code></pre></div></div> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bkk/plot3_snip-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bkk/plot3_snip-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bkk/plot3_snip-1400.webp"/> <img src="/assets/img/bkk/plot3_snip.png" width="600" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>That’s it for this post. Hope it was useful and/or interesting for you. Finally, some high-res versions of the above pictures with no map in the background (right-click and open in new tab to get to full res version):</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bkk/BUD_schedule_fire-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bkk/BUD_schedule_fire-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bkk/BUD_schedule_fire-1400.webp"/> <img src="/assets/img/bkk/BUD_schedule_fire.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bkk/BUD_gps_fire-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bkk/BUD_gps_fire-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bkk/BUD_gps_fire-1400.webp"/> <img src="/assets/img/bkk/BUD_gps_fire.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/bkk/BUD_gps_by_type-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/bkk/BUD_gps_by_type-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/bkk/BUD_gps_by_type-1400.webp"/> <img src="/assets/img/bkk/BUD_gps_by_type.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Happy plotting!</p> <h2 id="appendix-getting-real-time-gps-data">Appendix: getting real-time GPS data</h2> <p>BKK has a surprisingly good API to obtain real-time GPS data, accompanied by the also surprising lack of official documentation. Nevertheless, the following resources proved very useful (alas, they they are only available in hungarian):</p> <ul> <li><a href="http://docs.bkkfutar.apiary.io/#">An Apiary description</a></li> <li><a href="http://forum.index.hu/Article/showArticle?na_start=0&amp;na_step=30&amp;t=9211676&amp;na_order=">Index forum for BKK data users</a></li> <li><a href="https://balassygyorgy.wordpress.com/2016/02/02/bkk-futar-microsoft-bandre-2-bkk-futar-api/">The blog of György Balássy</a></li> </ul> <p>The final code that was used to download the data is displayed below withous any further comments. Should be quite self-explanatory.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="k">def</span> <span class="nf">vehicles_for_location</span><span class="p">(</span><span class="n">radius</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                          <span class="n">lat_span</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                          <span class="n">lon_span</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                          <span class="n">lat</span><span class="o">=</span><span class="mf">47.498412</span><span class="p">,</span>
                          <span class="n">lon</span><span class="o">=</span><span class="mf">19.04037</span><span class="p">,</span>
                          <span class="n">key</span><span class="o">=</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">,</span>
                          <span class="n">version</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
    
    <span class="k">if</span> <span class="n">lat_span</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lon_span</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">radius</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">"</span><span class="s">Either radius or lon_span and lat_span must be supplied</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">lat</span><span class="sh">'</span><span class="p">:</span> <span class="n">lat</span><span class="p">,</span>
              <span class="sh">'</span><span class="s">lon</span><span class="sh">'</span><span class="p">:</span> <span class="n">lon</span><span class="p">,</span>
              <span class="sh">'</span><span class="s">key</span><span class="sh">'</span><span class="p">:</span> <span class="n">key</span><span class="p">,</span>
              <span class="sh">'</span><span class="s">version</span><span class="sh">'</span><span class="p">:</span> <span class="n">version</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">radius</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">params</span><span class="p">[</span><span class="sh">'</span><span class="s">radius</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">radius</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">params</span><span class="p">[</span><span class="sh">'</span><span class="s">latSpan</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">lat_span</span>
        <span class="n">params</span><span class="p">[</span><span class="sh">'</span><span class="s">lonSpan</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">lon_span</span>
    
    <span class="n">base_url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://futar.bkk.hu/bkk-utvonaltervezo-api/ws/otp/api/where/vehicles-for-location.json</span><span class="sh">"</span>
    <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">)</span>
    <span class="n">req</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="n">req</span><span class="p">.</span><span class="n">ok</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Successful request at {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%m-%d %H:%M:%S</span><span class="sh">"</span><span class="p">)))</span>
    
    <span class="k">return</span> <span class="n">req</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">store_vfl</span><span class="p">(</span><span class="n">vfl_req</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
    
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">vfl_req</span><span class="p">[</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">list</span><span class="sh">'</span><span class="p">])</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
                <span class="n">df</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
            <span class="n">df</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="nb">file</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">run_scraper</span><span class="p">(</span><span class="n">interval</span><span class="p">,</span>
                <span class="n">run_until</span><span class="p">,</span>
                <span class="n">path</span><span class="p">,</span>
                <span class="n">min_interval</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
                <span class="n">radius</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                <span class="n">lat_span</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                <span class="n">lon_span</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>

    <span class="k">while</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">run_until</span><span class="p">:</span>
        <span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="n">vfl</span> <span class="o">=</span> <span class="nf">vehicles_for_location</span><span class="p">(</span><span class="n">radius</span><span class="o">=</span><span class="n">radius</span><span class="p">,</span> <span class="n">lat_span</span><span class="o">=</span><span class="n">lat_span</span><span class="p">,</span> <span class="n">lon_span</span><span class="o">=</span><span class="n">lon_span</span><span class="p">)</span>
        <span class="nf">except </span><span class="p">(</span><span class="nb">KeyboardInterrupt</span><span class="p">,</span> <span class="nb">SystemExit</span><span class="p">):</span>
            <span class="k">raise</span>
        <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">exceptions</span><span class="p">.</span><span class="n">HTTPError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="s">Unuccessful request at {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%m-%d %H:%M:%S</span><span class="sh">"</span><span class="p">)))</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="s">Something went wrong at {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%m-%d %H:%M:%S</span><span class="sh">"</span><span class="p">)))</span>
        <span class="nf">store_vfl</span><span class="p">(</span><span class="n">vfl</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
        
        <span class="n">sleep_time</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">min_interval</span><span class="p">,</span> <span class="n">t0</span> <span class="o">+</span> <span class="n">interval</span> <span class="o">-</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">())</span>
        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">sleep_time</span><span class="p">)</span>

<span class="c1"># if __name__ == "__main__":
</span>    <span class="c1"># run_until = datetime.datetime(2018, 10, 12, 22, 10, 00)
</span>    <span class="c1"># path = '/bkkdata/vfl_data.csv'
</span>    <span class="c1"># run_scraper(10, run_until, path, 100)
</span></code></pre></div></div>]]></content><author><name></name></author><category term="geodata"/><category term="datashader"/><category term="python"/><category term="plotting"/><category term="budapest"/><summary type="html"><![CDATA[Plotting stuff is fun. Plotting stuff on top of maps is even more fun. Even better, using modern Python visualizaton libraries, plotting on top of maps is simple, too.]]></summary></entry></feed>